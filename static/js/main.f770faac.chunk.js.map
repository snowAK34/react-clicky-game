{"version":3,"sources":["components/NavBar/index.js","components/Jumbotron/index.js","components/Card/index.js","components/Gameboard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","score","onClick","reset","Jumbotron","Card","src","image","alt","Gameboard","id","cards","map","element","i","components_Card","url","clickImage","Wrapper","state","topScore","num","_this","clicked","arrayCopy","length","setState","topscore","alert","resetGame","shuffleImages","slice","gameOver","arr","j","Math","floor","random","_ref","resetArrayCopy","this","components_NavBar","components_Jumbotron","components_Gameboard","Component","App","components_Wrapper","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f770faac.chunk.js","sourcesContent":["import React from 'react';\nimport \"./style.css\";\n\nfunction NavBar(props) {\n    \n    return (\n        <nav className=\"navbar fixed-top\">\n            <p>Score: {props.score} | Top Score: {props.score}</p>\n            <button onClick={props.reset}>Reset Game</button>\n        </nav>\n    )\n}\n\nexport default NavBar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n    return (\n        <div className= \"jumbotron\">\n            <h1>Clicky Game!</h1>\n            <h3>Click and image to earn points, but don't click any image more than once!</h3>\n        </div>\n    )\n}\n\nexport default Jumbotron;","import React from 'react';\nimport \"./style.css\";\n\nfunction Card(props) {\n    \n    return (\n        <div className=\"card\" onClick={props.onClick}>\n            <img src={props.image} alt=\"gamepiece\"></img>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from \"../Card\"\nimport \"./style.css\";\n\nfunction Gameboard(props) {\n    // map images to cards\n    return (\n        <div id=\"card-set\">\n            {props.cards.map((element, i) => {\n                return (\n                    <Card\n                        image={element.url}\n                        onClick={() => props.clickImage(element.id)}\n                    />\n                )  \n            \n            })}\n        </div>\n    )\n}\n\nexport default Gameboard;","import React, { Component } from \"react\";\nimport NavBar from \"../NavBar\";\nimport Jumbotron from \"../Jumbotron\";\nimport Gameboard from \"../Gameboard\";\nimport \"./style.css\";\n\nclass Wrapper extends Component {\n    state = {\n        score: 0,\n        topScore: 0,\n        cards: []\n    }\n\n    componentDidMount() {\n        this.setState({\n            cards: [\n                {\n                    id: 1,\n                    url: \"https://i.imgur.com/u2DDdRX.jpg\",\n                    clicked: false\n                },\n                {\n                    id: 2,\n                    url: \"https://i.imgur.com/6I7UcfA.jpg\",\n                    clicked: false\n                },\n                {\n                    id: 3,\n                    url: \"https://i.imgur.com/ITuiIAD.jpg\",\n                    clicked: false\n                },\n                {\n                    id: 4,\n                    url: \"https://i.imgur.com/aO0kVkQ.jpg\",\n                    clicked: false\n                },\n                {\n                    id: 5,\n                    url: \"https://i.imgur.com/4VD2pmy.jpg\",\n                    clicked: false\n                },\n                {\n                    id: 6,\n                    url: \"https://i.imgur.com/iVeEHY9.jpg\",\n                    clicked: false\n                },\n                {\n                    id: 7,\n                    url: \"https://i.imgur.com/kFycEJD.jpg\",\n                    clicked: false\n                },\n                {\n                    id: 8,\n                    url: \"https://i.imgur.com/YFyTXlz.jpg\",\n                    clicked: false\n                },\n                {\n                    id: 9,\n                    url: \"https://i.imgur.com/1MkWFVf.jpg\",\n                    clicked: false\n                },\n                {\n                    id: 10,\n                    url: \"https://i.imgur.com/n8T7R09.jpg\",\n                    clicked: false\n                },\n                {\n                    id: 11,\n                    url: \"https://i.imgur.com/gGEcwSs.jpg\",\n                    clicked: false\n                },\n                {\n                    id: 12,\n                    url: \"https://i.imgur.com/tWQBDQA.jpg\",\n                    clicked: false\n                }\n            ]\n        })\n    }\n\n    clickImage = num => {\n        \n        if (this.state.cards[num].clicked === false) {\n            let arrayCopy = this.state.cards;\n            for (let i = 0; i < arrayCopy.length; i++) {\n                if (arrayCopy.id === num) {\n                    arrayCopy[i].clicked = true\n                }\n            }\n            this.setState({\n                cards: arrayCopy,\n                score: this.state.score + 1\n            });\n\n            if (this.state.score > this.state.topscore) {\n                this.setState({\n                    topScore: this.state.score\n                });\n            }\n\n            if (this.state.score === 12) {\n                alert(\"You won!\");\n                this.resetGame();\n            }\n\n            this.shuffleImages(this.state.cards.slice(0));\n        } else {\n            this.gameOver();\n        }\n    }\n\n    shuffleImages = (arr) => {\n        for (let i = arr.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n        }\n        this.setState({\n            cards: arr\n        })\n    }\n\n    gameOver = () => {\n        alert(\"you lose\");\n        this.resetGame();\n    }\n\n    resetGame = () => {\n        let resetArrayCopy = this.state.cards;\n        for (let i = 0; i < resetArrayCopy.length; i++) {\n            resetArrayCopy[i].clicked = false;\n        }\n\n        this.setState({\n            score: 0,\n            cards: resetArrayCopy\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <NavBar \n                    score= {this.state.score}\n                    topScore= {this.state.topScore}\n                    reset= {this.resetGame}\n                />\n                <div className= \"container-fluid\">\n                    <Jumbotron />\n                    <Gameboard\n                        cards= {this.state.cards}\n                        clickImage= {this.clickImage}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Wrapper;","import React from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper';\n\nfunction App() {\n  return (\n    <Wrapper />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}